// TWC base mixins

@mixin respond-to($media) {
	// Desktop-first
	@if $media == large {
		@media (max-width: $screen-lg) {
			@content;
		}
	}
	@else if $media == medium {
		@media (max-width: $screen-md) {
			@content;
		}
	}
	@else if $media == small {
		@media (max-width: $screen-sm) {
			@content;
		}
	}
	@else if $media == small-and-up {
		@media (min-width: $screen-sm) {
			@content;
		}
	}
	@else if $media == medium-and-up {
		@media (min-width: $screen-md) {
			@content;
		}
	}
	@else if $media == large-and-up {
		@media (min-width: $screen-lg) {
			@content;
		}
	}
	@else if $media == small-only {
		@media (max-width: $screen-xs - 1) {
			@content;
		}
	}
	@else if $media == medium-only {
		@media (min-width: $screen-sm) and (max-width: $screen-sm-max) {
			@content;
		}
	}
	@else if $media == large-only {
		@media (min-width: $screen-md) and (max-width: $screen-lg-max) {
			@content;
		}
	}
}

// Breakpoint
@mixin bp($point) {
	@if $point == medium {
		@media (max-width: $medium) {
			@content;
		}
	}
	@else if $point == small {
		@media (max-width: $small) {
			@content;
		}
	}
}

// Margin
@mixin margin($top: 0, $right: $top or $left, $bottom: $top, $left: $right or $top) {
	margin-top: $top;
	margin-right: $right;
	margin-bottom: $bottom;
	margin-left: $left;
}

// Padding
@mixin padding($top: 0, $right: $top or $left, $bottom: $top, $left: $right or $top) {
	padding-top: $top;
	padding-right: $right;
	padding-bottom: $bottom;
	padding-left: $left;
}

// Background Clip
@mixin background-clip($type: padding-box) {
	background-clip: $type;
}

// Border Radius
@mixin border-radius($radius: 3px) {
	border-radius: $radius;

	@include background-clip;
}

// Background Gradients
@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
	background-color: $startColor;
	background-image: linear-gradient(to bottom, $startColor, $endColor);
	zoom: 1;
}

@mixin horizontal-gradient($startColor, $to, $endColor: 100%) {
	/* fallback/image non-cover color */
	background-color: $startColor;
	background: linear-gradient(to right, $startColor 0%, $to $endColor);
}

// Box-Shadow
@mixin box-shadow($value: 0 1px 2px 0 #888) {
	box-shadow: $value;
}

// Vertical Align
@mixin vertical-center($pos: relative) {
	position: $pos;
	top: 50%;
	transform: translateY(-50%);
}

// Inline-Block IE
@mixin inline-block {
	display: inline-block;
}

// Opacity
@mixin opacity($opacity) {
	filter: alpha(opacity = $opacity * 100);
	opacity: $opacity;
}

// Transform
@mixin rotate($degrees) {
	filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod=' auto expand ', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
	zoom: 1;
	transform: rotate($degrees);
}

// Transitions
@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
	transition: $what $length $easing;
}

@mixin font-family($font, $style: normal, $weight: normal) {
	font-family: $font, Arial, Sans-Serif;
	font-style: $style;
	font-weight: $weight;
}

// Font Size
@mixin font-size($size) {
	font-size: $size * 1px;
	font-size: $size * 0.1rem;
}

// Column Count
@mixin columns($count, $gap) {
	column-count: $count;
	column-gap: $gap;
}

// Updated clearfix. http://cssmojo.com/the-very-latest-clearfix-reloaded/
@mixin clearfix {
	&::after {
		content: '';
		display: block;
		clear: both;
	}
}

@mixin row {
	@include clearfix;
}

@mixin column($width: 50%) {
	float: left;
	position: relative;
	min-height: 1px;
	width: $width;
}

@mixin center($type: both, $position: absolute) {
	position: $position;

	@if $type == both {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}
	@else if $type == horizontal {
		left: 50%;
		transform: translateX(-50%);
	}
	@else if $type == vertical {
		top: 50%;
		transform: translateY(-50%);
	}
}

// Mimic fixed-width container component
@mixin twc-container {
	display: block;
	width: 100%;
	max-width: $site-width;
	margin: 0 auto;
	padding: 2em 0;
	overflow: visible;
}
